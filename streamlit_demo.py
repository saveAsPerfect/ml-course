from sklearn.model_selection import cross_val_score
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import streamlit as st


st.set_page_config(
    page_title="BigData Team: streamlit demo",
    page_icon="ü¶Å",
    layout="wide",
)

st.sidebar.markdown("""
# –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏

1. –í–≤–µ–¥–µ–Ω–∏–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ML
2. –ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏
3. –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è
4. –ê–Ω—Å–∞–º–±–ª–∏
5. –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
6. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã
7. –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è
8. Big Data
9. –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å


Github –∫—É—Ä—Å–∞:\n
[github.com/big-data-team/ml-course](https://github.com/big-data-team/ml-course)
""")

st.title("ü¶Å BigData Team: Streamlit Demo")
st.header("01. –í–≤–µ–¥–µ–Ω–∏–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ML", divider=True)
st.subheader("Titanic dataset, train sample", divider=True)

train = pd.read_csv("train.csv")
st.write(train)

    
def preprocess_data(data):
    columns_to_drop = ["Ticket", "PassengerId", "Name", "Cabin"]
    data.drop(columns_to_drop, axis=1, inplace=True)

    data["Sex"] = (data["Sex"] == "female").astype(int)
    data["Embarked"] = data["Embarked"].map({"S":0, "C":1, "Q":2})

    data.fillna(-1, inplace=True)

preprocess_data(train)

labels = train["Survived"]
train.drop("Survived", axis=1, inplace=True)

st.subheader("–í –ø–æ–∏—Å–∫–∞—Ö –ª—É—á—à–µ–π kNN –º–æ–¥–µ–ª–∏", divider=True)

col1, col_, col2 = st.columns([0.5, 0.1, 0.4])
with col1:
    n_neihbors = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π", value=5, min_value=1, max_value=25)
    weights = st.selectbox("weights", options=("uniform", "distance"))
    p = st.number_input("distance_p(ower degree)", value=2, min_value=1)
    st.markdown("–ë–æ–ª—å—à–µ –æ –ø–∞—Ä–∞–º–∞—Ç—Ä–∞—Ö kNN –≤ sklearn: [–ø–æ —Å—Å—ã–ª–∫–µ](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)")

    knn = KNeighborsClassifier(n_neighbors=n_neihbors, weights=weights, p=p)
    cross_val_scores = cross_val_score(knn, train, labels, scoring="accuracy", cv=5)

with col2:
    cross_val_score_mean = cross_val_scores.mean()
    delta = None
    if "previous_score" in st.session_state:
        delta = cross_val_score_mean - st.session_state["previous_score"]
        delta = round(delta, 3)

    st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.metric("Accuracy (mean over 5 folds)", round(cross_val_score_mean, 3), delta, border=True)
    st.write({"score_mean": cross_val_score_mean, "score_std": cross_val_scores.std()})

    st.session_state["previous_score"] = cross_val_score_mean

st.subheader("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–±–æ–Ω—É—Å)", divider=True)

st.write("""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å –ø–æ–º–æ—â—å—é [st.line_chart](https://docs.streamlit.io/develop/api-reference/charts/st.line_chart)
–∏ [st.setssion_state](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state)
—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π cross_val_score. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ GitHub. –ë–æ–Ω—É—Å–æ–º
–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞–¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ Streamlit Community Cloud: 
[–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started).
""")

# bouns
if "score_history" not in st.session_state:
    st.session_state["score_history"] = []

st.session_state["score_history"].append(cross_val_score_mean)



# linechart
st.subheader("Cross_val_scores")
st.line_chart(st.session_state["score_history"])
# clear button
if st.button("clear history"):
    st.session_state["score_history"] = []